import logging
import os
import sqlite3
from dotenv import load_dotenv
from database import get_all_users
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler, CallbackContext, filters
from utils.telegram_utils import is_admin  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ bot —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
bot = Bot(token=TOKEN)

async def get_username(user_id: int, bot: Bot) -> str:
    try:
        chat = await bot.get_chat(user_id)
        return chat.username if chat.username else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}')
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

async def handle_admin_panel_callback(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    query = update.callback_query

    if query.data.startswith("block_"):
        try:
            blocked_user_id = int(query.data.split("_")[1])
            blocked_username = await get_username(blocked_user_id, context.bot)
            
            conn = sqlite3.connect('channels.db')
            c = conn.cursor()
            c.execute('INSERT OR IGNORE INTO blocked_users (user_id, username) VALUES (?, ?)', 
                      (blocked_user_id, blocked_username))
            conn.commit()
            conn.close()

            await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {blocked_username} (ID: {blocked_user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

            try:
                await context.bot.send_message(
                    chat_id=blocked_user_id,
                    text="–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã."
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {blocked_user_id}: {e}")

            await query.message.delete()

        except ValueError:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    elif query.data.startswith("unblock_"):
        try:
            unblocked_user_id = int(query.data.split("_")[1])
            conn = sqlite3.connect('channels.db')
            c = conn.cursor()
            c.execute('DELETE FROM blocked_users WHERE user_id = ?', (unblocked_user_id,))
            conn.commit()
            conn.close()

            unblocked_username = await get_username(unblocked_user_id, context.bot)

            await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unblocked_username} (ID: {unblocked_user_id}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

            try:
                await context.bot.send_message(
                    chat_id=unblocked_user_id,
                    text="–í—ã –±–æ–ª—å—à–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {unblocked_user_id}: {e}")

            await query.message.delete()

        except ValueError:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    elif query.data == "admin_panel" and is_admin(user_id):
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="show_user_list")],
            [InlineKeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="show_blocked_user_list")],
            [InlineKeyboardButton("üåü –í—ã–¥–∞—Ç—å VIP-—Å—Ç–∞—Ç—É—Å", callback_data="give_vip")],
            [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_announcement")]
        ])
        await query.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

    elif query.data == "show_user_list" and is_admin(user_id):
        await send_user_list(update, context)

    elif query.data == "show_blocked_user_list" and is_admin(user_id):
        await send_blocked_user_list(update, context)

    elif query.data == "give_vip" and is_admin(user_id):
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ VIP-—Å—Ç–∞—Ç—É—Å–∞:")
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    elif query.data == "send_announcement" and is_admin(user_id):
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    else:
        await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

async def send_blocked_user_list(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    conn = sqlite3.connect('channels.db')
    c = conn.cursor()
    c.execute('SELECT user_id, username FROM blocked_users')
    blocked_users = c.fetchall()
    conn.close()

    if not blocked_users:
        await update.callback_query.message.reply_text("–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    keyboard = [[InlineKeyboardButton(f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {user[1] or user[0]}", callback_data=f"unblock_{user[0]}")] for user in blocked_users]
    markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)

async def handle_admin_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if is_admin(user_id):
        text = update.message.text
        if text.isdigit():
            blocked_user_id = int(text)
            blocked_username = await get_username(blocked_user_id, context.bot)
            conn = sqlite3.connect('channels.db')
            c = conn.cursor()
            c.execute('INSERT OR IGNORE INTO blocked_users (user_id, username) VALUES (?, ?)', (blocked_user_id, blocked_username))
            conn.commit()
            conn.close()
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {blocked_username} (ID: {blocked_user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

async def send_user_list(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.callback_query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    users = get_all_users()  # –ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard = []
    for user_id in users:
        username = await get_username(user_id, context.bot)
        keyboard.append([InlineKeyboardButton(f"@{username}", callback_data=f"block_{user_id}")])
    
    markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)

def register_admin_handlers(application):
    application.add_handler(CallbackQueryHandler(handle_admin_panel_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_message))
    application.add_handler(CommandHandler('showusers', send_user_list))
    application.add_handler(CommandHandler('showblockedusers', send_blocked_user_list))
