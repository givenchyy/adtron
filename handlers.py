import logging
import os
import sqlite3
import httpx
import html
from datetime import datetime
from functools import wraps
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, CommandHandler, MessageHandler, ContextTypes, CallbackContext
from database import (
    add_user_channel, remove_user_channel, get_user_channels,
    add_all_channel, get_all_channels, get_channel_owner,
    add_post_request, get_pending_requests, update_post_request_status,
    get_top_users, update_request_count, update_user_request_count  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ get_top_users –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
)


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
post_requests = {}

DATABASE = 'channels.db'


async def check_subscription(user_id: int, bot) -> bool:
    channel_username = '@adthrone'
    try:
        member = await bot.get_chat_member(chat_id=channel_username, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª {channel_username}: {e}')
        return False
    
def require_subscription(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
        if not await check_subscription(user_id, context.bot):
            keyboard = [
                [InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", url="https://t.me/adthrone")],
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @adthrone, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".',
                reply_markup=reply_markup
            )
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        return await func(update, context, *args, **kwargs)
    return wrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
async def get_channel_subscribers_count(chat_id: str, bot) -> int:
    url = f'https://api.telegram.org/bot{TOKEN}/getChatMembersCount'
    params = {'chat_id': chat_id}
    async with httpx.AsyncClient() as client:
        response = await client.get(url, params=params)
        if response.status_code == 200:
            result = response.json()
            return result.get('result', 0)
        else:
            logging.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {response.status_code}')
            return 0

async def escape_html(text):
    return html.escape(text)

async def get_username(user_id, TOKEN):
    async with httpx.AsyncClient() as client:
        response = await client.post(f'https://api.telegram.org/bot{TOKEN}/getChat', params={'chat_id': user_id})
        data = response.json()
        if data['ok']:
            chat = data['result']
            return chat.get('username', None)
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {data['description']}")
            return None

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute('SELECT user_id, request_count FROM user_requests ORDER BY request_count DESC')
    rows = c.fetchall()
    conn.close()

    if rows:
        top_text = "<b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n\n"
        for idx, (user_id, request_count) in enumerate(rows, start=1):
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_channels = get_user_channels(user_id)
            if user_channels['channels']:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞
                channel_name = user_channels['channels'][0]
                subscribers_count = await get_channel_subscribers_count(f"@{channel_name}", context.bot)
                top_text += f"üìä <b>{idx}. @{channel_name} ({subscribers_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)</b> ‚Äî <b>–ó–∞–ø—Ä–æ—Å–æ–≤:</b> <code>{request_count}</code>\n"
            else:
                top_text += f"üìä <b>{idx}. User ID: {user_id}</b> ‚Äî <b>–ó–∞–ø—Ä–æ—Å–æ–≤:</b> <code>{request_count}</code>\n"

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–Ω–∏–∑—É
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        escaped_time = await escape_html(current_time)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ await –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ—Ä—É—Ç–∏–Ω—ã
        top_text += f"\n<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞</b> {escaped_time}\n"
        top_text += "<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É</b> /stats\n"

        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {top_text}")

        try:
            await update.message.reply_text(top_text, parse_mode='HTML')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        await update.message.reply_text("–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –ù–µ –±—ã–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤.")

    
async def check_subscription_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
    if await check_subscription(user_id, context.bot):
        await query.message.reply_text('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. /stats')
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start
        await start(update, context)
    else:
        await query.message.reply_text(
            '–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @adthrone. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.'
        )
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
@require_subscription
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    response = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.\n\n'

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    response += 'üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
    response += 'üîπ <code>/stats</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
    response += 'üîπ <code>/addchannel @channel_name</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n'
    response += 'üîπ <code>/removechannel @channel_name</code> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n'
    response += 'üîπ <code>/createpost</code> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ø–æ—Å—Ç\n'
    response += 'üîπ <code>/top</code> ‚Äî —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'

    try:
        await update.message.reply_text(response, parse_mode='HTML')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /stats
@require_subscription
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = await get_username(user_id, TOKEN)
    user_channels = get_user_channels(user_id)

    if not user_channels['channels']:
        await update.message.reply_text(
            '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addchannel @channel_name.'
        )
        return

    conn = sqlite3.connect(DATABASE)
    c = conn.cursor()
    c.execute('SELECT request_count FROM user_requests WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()

    request_count = result[0] if result else 0

    response = f'üåü <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> {"@" + username if username else ""} üåü\n\n'
    response += '<b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n'
    for index, channel in enumerate(user_channels['channels'], start=1):
        response += f'{index}. <a href="https://t.me/{channel}">@{channel}</a>\n'

    response += f'\n<b>–í—ã —Å–¥–µ–ª–∞–ª–∏ {request_count} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–µ –ø–æ—Å—Ç—ã.</b>\n\n'
    response += 'üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
    response += 'üîπ <code>/stats</code> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
    response += 'üîπ <code>/addchannel @channel_name</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n'
    response += 'üîπ <code>/removechannel @channel_name</code> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n'
    response += 'üîπ <code>/createpost</code> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ø–æ—Å—Ç\n'
    response += 'üîπ <code>/top</code> ‚Äî —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'

    current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
    response += f'\n<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {current_time}'

    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {response}")

    try:
        await update.message.reply_text(response, parse_mode='HTML')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@require_subscription
async def add_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /addchannel
    user_id = update.message.from_user.id
    if not context.args:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /addchannel @channel_name')
        return
    
    channel_name = context.args[0].lstrip('@')
    chat_id = f'@{channel_name}'

    if await check_if_bot_can_post_messages(chat_id, context.bot):
        add_user_channel(user_id, channel_name)
        add_all_channel(channel_name, user_id)
        await update.message.reply_text(f'–ö–∞–Ω–∞–ª @{channel_name} –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.')
    else:
        await update.message.reply_text(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è –∏–º–µ—é –ø—Ä–∞–≤–æ "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è" –≤ –∫–∞–Ω–∞–ª–µ @{channel_name}.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@require_subscription
async def remove_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /removechannel
    user_id = update.message.from_user.id
    if not context.args:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /removechannel @channel_name')
        return
    
    channel_name = context.args[0].lstrip('@')
    remove_user_channel(user_id, channel_name)
    await update.message.reply_text(f'–ö–∞–Ω–∞–ª @{channel_name} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
async def check_if_bot_can_post_messages(chat_id: str, bot) -> bool:
    try:
        chat_member = await bot.get_chat_member(chat_id, bot.id)
        return chat_member.status in ['administrator', 'creator'] and chat_member.can_post_messages
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}')
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ø–æ—Å—Ç
@require_subscription
async def create_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /createpost
    user_id = update.message.from_user.id
    user_channels = get_user_channels(user_id)

    if not user_channels['channels']:
        await update.message.reply_text(
            '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addchannel @channel_name –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.'
        )
        return

    all_channels = get_all_channels()
    my_channel_name = get_channel_name_by_user_id(user_id)

    if all_channels:
        keyboard = [
            [InlineKeyboardButton(f'@{channel} ({await get_channel_subscribers_count(f"@{channel}", context.bot)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)', callback_data=f'select_channel_{channel}')]
            for channel in all_channels
            if channel != my_channel_name
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞:', reply_markup=reply_markup)
    else:
        await update.message.reply_text('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.')



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id

    if data.startswith('select_channel_'):
        channel_name = data[len('select_channel_'):]
        post_requests[user_id] = {'channel_name': channel_name, 'post_template': None, 'stage': 'request_sent'}
        await query.message.reply_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª @{channel_name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞.')
        await query.message.delete()

    elif data.startswith(('confirm_', 'decline_')):
        action, channel_name, requester_id = data.split('_', 2)
        requester_id = int(requester_id)

        if action == 'confirm':
            await handle_confirm(requester_id, channel_name, context.bot)
        else:
            await handle_decline(requester_id, channel_name, context.bot)

        await query.message.delete()

def get_channel_name_by_user_id(user_id: int) -> str:
    user_channels = get_user_channels(user_id)
    return user_channels['channels'][0] if user_channels['channels'] else None

async def handle_confirm(requester_id: int, channel_name: str, bot):
    request = post_requests.get(requester_id)
    if request and request.get('stage') == 'request_sent':
        owner_id = get_channel_owner(channel_name)

        if owner_id:
            try:
                requesting_channel_name = get_channel_name_by_user_id(requester_id)
                if requesting_channel_name != channel_name:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –∫–∞–Ω–∞–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
                    if 'photo' in request:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                        photo_file = request['photo']
                        caption = request.get('caption', '')  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –µ—Å—Ç—å
                        logging.info(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª @{channel_name} —Å caption: {caption}')
                        await bot.send_photo(chat_id=f'@{channel_name}', photo=photo_file, caption=caption)
                    else:  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        post_template = request.get('post_template', '')
                        logging.info(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–Ω–∞–ª @{channel_name}: {post_template}')
                        await bot.send_message(chat_id=f'@{channel_name}', text=post_template)

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª, –≥–¥–µ –±—ã–ª –∑–∞–ø—Ä–æ—Å
                    await bot.send_message(chat_id=requester_id, text=f'–í–∞—à –ø–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ @{channel_name}.')

                    post_requests[owner_id] = {'channel_name': requesting_channel_name, 'stage': 'awaiting_reverse_post'}
                    await bot.send_message(chat_id=owner_id, text=f'–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ @{requesting_channel_name}.')

                    update_post_request_status(requester_id, channel_name, 'completed')
                    post_requests[requester_id]['stage'] = 'completed'  # –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø

                else:
                    await bot.send_message(chat_id=requester_id, text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.')

            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª @{channel_name}: {e}')
                await bot.send_message(chat_id=requester_id, text='–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        else:
            await bot.send_message(chat_id=requester_id, text=f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ @{channel_name}.')
    else:
        await bot.send_message(chat_id=requester_id, text='–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
async def handle_decline(requester_id: int, channel_name: str, bot):
    await bot.send_message(chat_id=requester_id, text=f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ø–æ—Å—Ç –æ—Ç –∫–∞–Ω–∞–ª–∞ @{channel_name} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.')


async def handle_channel_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    channel_name = query.data.replace('select_channel_', '')

    # –ó–∞–ø—Ä–æ—Å —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query.message.reply_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª @{channel_name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞.')

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å—Ç–∞
    context.user_data['selected_channel'] = channel_name
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å—Ç–∞
async def receive_post_template(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id in post_requests:
        request = post_requests[user_id]
        if request.get('stage') == 'completed':
            return

        channel_name = request['channel_name']
        owner_id = get_channel_owner(channel_name)

        if owner_id:
            if update.message.photo:
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
                photo_file = update.message.photo[-1].file_id
                post_requests[user_id]['photo'] = photo_file
                post_requests[user_id]['caption'] = update.message.caption or ''
                await update.message.reply_text('–®–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç.')
            elif update.message.text:
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                post_requests[user_id]['post_template'] = update.message.text
                await update.message.reply_text('–®–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç.')
            
            # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞
            if request['stage'] == 'request_sent':
                if user_id == owner_id:
                    await handle_reverse_post(user_id, channel_name, context.bot)
                else:
                    await send_post_request_to_owner(user_id, channel_name, context.bot)
                update_user_request_count(user_id)
            elif request['stage'] == 'awaiting_reverse_post':
                await handle_reverse_post(user_id, channel_name, context.bot)
                update_user_request_count(user_id)
        else:
            await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ @{channel_name}.')
    else:
        await update.message.reply_text('–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.')




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞)
async def handle_reverse_post(user_id: int, channel_name: str, bot):
    original_channel = post_requests[user_id]['channel_name']

    if 'photo' in post_requests[user_id]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        await bot.send_photo(chat_id=f'@{original_channel}', photo=post_requests[user_id]['photo'], caption=post_requests[user_id].get('caption', ''))
    else:  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await bot.send_message(chat_id=f'@{original_channel}', text=post_requests[user_id]['post_template'])

    await bot.send_message(chat_id=user_id, text=f'–í–∞—à –ø–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ @{original_channel}.')

    post_requests[user_id]['stage'] = 'completed'  # –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø
    await bot.send_message(chat_id=user_id, text='–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞.')

    del post_requests[user_id]  # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞
async def send_post_request_to_owner(requester_id: int, channel_name: str, bot):
    owner_id = get_channel_owner(channel_name)
    if not owner_id:
        logging.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ @{channel_name}.')
        return

    logging.info(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞ @{channel_name}.')

    request = post_requests.get(requester_id, {})
    post_template = request.get('post_template', '')
    photo_file = request.get('photo')
    caption = request.get('caption', '') or post_template

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f'confirm_{channel_name}_{requester_id}'),
         InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline_{channel_name}_{requester_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if photo_file:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            response = await bot.send_photo(
                chat_id=owner_id,
                photo=photo_file,
                caption=caption,
                reply_markup=reply_markup
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            response = await bot.send_message(
                chat_id=owner_id,
                text=f'–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π –ø–æ—Å—Ç –æ—Ç @{channel_name}. –®–∞–±–ª–æ–Ω:\n\n{post_template}',
                reply_markup=reply_markup
            )

        logging.info(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞ @{channel_name}. –û—Ç–≤–µ—Ç: {response}')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–∞–Ω–∞–ª–∞ @{channel_name}: {e}')



